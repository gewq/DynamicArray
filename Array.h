/**
\file Array.h
\brief Шаблонный класс Array — динамический массив данных произвольного типа, поддерживающих операцию ==

Функциональность класса:
	- создать контейнер
	- скопировать контейнер
	- получить доступ к любому элементу контейнера по индексу
	- изменить размер контейнера
	- вставить элемент в контейнер
	- удалить элемент из контейнера
	- вставить элемент в начало
	- вставить элемент в конец
	- поиск элемента в контейнере по значению

Выбрасывает следующие исключения:
	- не удалось выделить память
	- некорректная емкость (<= 0)
	- обращение по некорректному индексу (выход за границы массива)
*/

#pragma once
#ifndef ARRAY_H_SENTRY
#define ARRAY_H_SENTRY

#include <string>
#include <exception>

#include "bad_length.h"	//Класс исключение - некорректная емкость массива
#include "bad_range.h"	//Класс исключение - некорректный индекс (выход за пределы массива)



template <typename T>
class Array {
	public:
		/**
		Конструктор по-умолчанию. Задаёт емкость = 1
		*/
		Array();

		/**
		Параметризованный конструктор.
		\param[in] capacity Емкость контейнера
		*/
		explicit Array(int capacity);

		/**
		Конструктор копирования.
		\param[in] other Const ссылка на объект класса
		*/
		Array(const Array& other);

		/**
		Деструктор - освобождает память, выделенную под массив
		*/
		~Array();

		/**
		Перегрузка оператора присваивания =
		\param[in] other Const ссылка на объект класса
		\return Ссылку на объект
		*/
		Array& operator=(const Array& other);

		/**
		\return Признак пуст ли контейнер
		*/
		bool isEmpty() const;

		/**
		\return Емкость контейнера
		*/
		int getCapacity() const;

		/**
		\return Текущее количество элементов в контейнере
		*/
		int getSize() const;

		/**
		Возвращает по заданному индексу значение элемента в контейнере
		\param[in] index Индекс элемента
		\return Значение элемента
		*/
		T getValue(int index) const;

		/**
		Изменяет емкость контейнера.
		Если заданная емкость меньше текущей - элементы которые
		не поместились отбрасываются
		\param[in] capacity Емкость
		*/
		void resize(int capacity);

		/**
		Помещает заданное значение в начало контейнера
		\param[in] value Значение
		*/
		void pushFront(T value);

		/**
		Помещает заданное значение в конец контейнера
		\param[in] value Значение
		*/
		void pushBack(T value);

		/**
		Помещает значение по заданному индексу
		\param[in] value Значение
		\param[in] index Индекс
		*/
		void push(T value, int index);

		/**
		Удаляет из контейнера элемент по заданному индексу.
		Смещает все элементы после удаляемого на 1 назад
		\param[in] index Индекс удаляемого элемента
		*/
		void remove(int index);

		/**
		Удаляет все элементы из контейнера.
		*/
		void clear();

		/**
		Возвращает индекс первого элемента в массива с заданным значением
		Если элемент не найден - возвращает текущее количество элементов + 1
		\param[in] value Искомое значение
		\return Индекс искомого элемента
		*/
		int findValue(T value);

	private:
		/**
		Смещает элементы контейнера, начиная с позиции index, на 1 вперед.
		\param[in] index Индекс элемента контейнера, начиная с которого смещать
		*/
		void moveForward(int index);

		/**
		Смещает элементы контейнера, начиная с позиции index, на 1 назад.
		\param[in] index Индекс элемента контейнера, начиная с которого смещать
		*/
		void moveBack(int index);

		int capacity_;	///<Емкость контейнера
		int size_;		///<Текущее количество элементов в контейнере
		T* data_;		///<Указатель на участок памяти в котором расположен массив
};

//Реализация методов шаблонного класса
#include "Array.hpp"

#endif